{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to IS 640 Business Application Programming!","text":""},{"location":"#class","title":"Class","text":"<p>Class IS 640 Section 2, Programming for Business Analytics Fall 2024.</p>"},{"location":"#course-description","title":"Course Description","text":"<p>This course delves into Python programming and its application in business data analysis. Students will design, analyze, and implement business applications that leverage advanced programming tools and techniques. The curriculum focuses on developing business applications of varying complexity, emphasizing efficient ETL (Extract, Transform, Load) data processing methods. By the end of the course, students will build a programming mindset and master best practices in business application development.  </p>"},{"location":"#book","title":"Book","text":"Book Details <p>IS 640: Business Application Programming zyBook ISBN: 979-8-203-12288-9 Zybook Code:  CSULBIS640PatelFall2024 </p>"},{"location":"#lectures","title":"Lectures","text":"<p>Lectures are a combination of Zybooks IS 640: Business Application Programming and my notes.</p>"},{"location":"Reference/","title":"Reference","text":""},{"location":"Reference/#welcome-to-mkdocs","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"Reference/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site folder with all other assets automatically.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"Reference/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"Reference/#code-blocks","title":"Code blocks","text":"<pre><code>import numpy as np\n</code></pre> <pre><code>import numpy as np\ndef foo():\n    return 'hi'\n\nfoo()\n</code></pre>"},{"location":"Reference/#emojis","title":"Emojis","text":"<p>\ud83e\udd96\ud83e\udd5a\ud83e\udd95</p>"},{"location":"Reference/#blocks-with-admonition","title":"Blocks with admonition","text":"<p>Classes: <code>['note', 'abstract', 'info', 'tip', 'success', 'question', 'warning', 'failure', 'danger', 'bug', 'example', 'quote']</code></p> <p>Expadable <pre><code>??? danger \"This is expandable\"\n    This is expandable, you can add note, example, and warning types\n</code></pre></p> This is expandable <p>This is expandable, you can add note, example, and warning types </p> <p>Note</p> <p>Hey! This is a note admonition type!</p> <p>Abstract</p> <p>Hey! This is a abstract admonition type!</p> <p>Info</p> <p>Hey! This is a info admonition type!</p> <p>Tip</p> <p>Hey! This is a tip admonition type!</p> <p>Success</p> <p>Hey! This is a success admonition type!</p> <p>Question</p> <p>Hey! This is a question admonition type!</p> <p>Warning</p> <p>Hey! This is a warning admonition type!</p> <p>Failure</p> <p>Hey! This is a failure admonition type!</p> <p>Danger</p> <p>Hey! This is a danger admonition type!</p> <p>Bug</p> <p>Hey! This is a bug admonition type!</p> <p>Example</p> <p>Hey! This is a example admonition type!</p> <p>Quote</p> <p>Hey! This is a quote admonition type!</p>"},{"location":"Reference/#tasks","title":"Tasks","text":"<p>A Nice Task List  </p> <ul> <li> Complete  </li> <li>[] something  </li> <li>[] empty </li> </ul>"},{"location":"installation/","title":"Install Python","text":"<p>Disclaimer</p> <p>Apologies in advance. This class will mainly focus on window systems, however I will provide all the documentation necessary for you to use MacOS &amp; Linux.</p>"},{"location":"installation/#windows","title":"\ud83e\ude9f Windows","text":"<p>Head over to python's website to download the latest version of python.  </p> Download Python <p>Python.org If you are a rebel, you can download an older version if you have other dependencies. (If you know what you are doing)</p> <ol> <li>Install with default settings</li> <li>Install for all users</li> <li>Install with PATH</li> </ol>"},{"location":"installation/#mac-os-linux","title":"\ud83c\udf4e Mac OS &amp; Linux","text":"<p>Installation YouTube Video</p> <p>You can use any video on YouTube if you like. Below is one for reference. How to Install Python on Mac </p>"},{"location":"installation/#preferred-ide-integrated-development-environment","title":"\ud83e\udd96 Preferred IDE (Integrated Development Environment)","text":"<p>VSCode </p> <p>This class will use VSCode as the default IDE. You may choose to use any IDE you want.</p>"},{"location":"installation/#once-vscode-is-installed-you-need-to-install-2-extensions-within-vs-code","title":"Once VSCode is installed, you need to install 2 Extensions within VS Code","text":"<ul> <li>Python (Allows you to code using Python Syntax)</li> <li>Jupyter (Allows you to code in notebook formats)</li> </ul>"},{"location":"installation/#command-line-interface-cli","title":"\ud83d\udcbb Command Line Interface (CLI)","text":"<p>We use CLI to communicate and interact with the OS without using any GUI(1).</p> <ol> <li>Graphical User Interface  </li> </ol> <p>For Windows, PowerShell is newer, meant to replace CMD, and offers more capabilities. - You can use which ever you want.</p> <p>Learn CMD - YouTube </p> <p>For Mac OS, Terminal, Zsh, or Bash would be your CLI.  </p> <p>Linux Commands you NEED to know</p>"},{"location":"book/CH1/chapter1/","title":"Chapter 1","text":""},{"location":"book/CH1/chapter1/#11-programming-general","title":"1.1 Programming (general)","text":"<p>Input: Receives data Process: Performs computations on that data Output: Program puts that data somewhere. </p> <p>There are a sequence of steps and an order a program must follow. </p> <p> </p> <p>When reading a book, you open the book a certain way depending on your region and you start to read words from left to right to ingest sentences as you read from top to bottom. You can say there is an order of operations here.  </p> YouTube Video <p>Here is an example where a parent teaches their kids how to write a process in sequential logical steps. Metaphorically, the father can be the computer, the document will be the program.  </p> <p>(Ctrl + Click to open in new tab) https://www.youtube.com/watch?v=cDA3_5982h8</p>"},{"location":"book/CH1/chapter1/#12-programming-using-python","title":"1.2 Programming using Python","text":"<p>Python Interpreter: Program that executes code written in the python programming language.  </p> \ud83e\udd96 Example <p>I started my Python Interpreter using windows CMD/PowerShell with below snippet. (Python should start up if PATH variables were setup on installation.) Note - You can't start a \"Python Application\" just by installing Python, you  have to start Python from another software like an IDE (1) or from your CMD (2).</p> <ol> <li>Integrated Development Environment (IDE) Examples of IDE's are VSCode, Sublime, IDLE, Thonny, Spyder, and Python Interpreter using CMD. </li> <li>Command Prompt (CMD) Default command-line interpreter for the OS. I strongly suggest learning how to use your command prompt. Watch this to get started! \ud83d\udc49 YouTube Tutorials </li> </ol> <pre><code>python\nprint('Hello World!')\n</code></pre> <p></p> <p>Interactive Interpreter: Program that allows to execute one line of code at a time.  </p> <p>Code: Code is a common word for the textual representation of a program (and hence programming is also called coding).  </p> <p>Line: Row of text.  </p> <p>Prompt: \"&gt;&gt;&gt;\", this indicates the interpreter is ready to accept code.  </p> <p>Statement: A statement is a program instruction.  </p> <p>Expressions: Expressions are code that return a value when evaluated; for example, the code wage * hours * weeks is an expression that computes a number.  </p> <pre><code>wage = 20\nhours = 40\nweeks = 52\nsalary = wage * hours * weeks\nprint(salary)\n</code></pre> <p>Variables: The names wage, hours, weeks, and salary are variables, which are named references to values stored by the interpreter.  </p> <p>Assignment: A new variable is created by performing an assignment using the = symbol.  </p> Variables - Why is this is awesome!? <p>Now you can refer to your previous assignments \ud83e\udd2f. 1. If you put a paragraph in writing and assign that paragraph to a variable, you don't have to copy and paste that paragraph every single time to refer to it. 2. You can change and evolve the variable, refer to an old input to add something new.  </p> <p> </p> <p>below is pseudo code (1), not Pandas (2) Syntax.</p> <ol> <li>Informal notation of programming language. </li> <li>Python Library, think excel + sql for Python.  </li> </ol> <p>df =  </p> person age Harry 12 <p>Lets add one more row to df</p> <p>newRow =  </p> person age Ron 13 <p>df + newRow = </p> person age Harry 12 Ron 13 <p>df = df + newRow  </p> <p>print(): Print() function displays variables or expression values.</p> <p>Comments: Characters such as \"#\" denote comments, which are optional but can be used to explain portions of code to a human reader.  </p> <pre><code># See &lt;-- HashtagComment, subscribe, It means the interpreter will ignore this line of code. Write all the notes within the same line. If you make the person scroll to read, its already too long. Please create another comment line.\nstoreThisValue = 13\nitDoesntMatterWhatYouCallMe = '13'\nbutItKindOfDoes = ':)'  \n</code></pre> <p>Formatting &amp; Standards</p> <p>There is a standard way of writing so we all can be in unison to understand each other's code. PEP 8 Style Guide </p>"},{"location":"book/CH1/chapter1/#13-basic-input-and-output","title":"1.3 Basic input and output","text":"<p>Python by itself comes with built in functions you can use. </p> metaphor <p>Similar to excel, you use SUM(), COUNT(), etc to do aggregations. These are built in functions that come with Excel.  </p> <pre><code>print()\n</code></pre> <p>In python, we utilize print to output data in text or in a string format.  </p> Why print()? <p> </p> <ul> <li>We can display outputs of lines sequentially to better debug if needed  </li> <li>To display any outputs, when you run code in automation, you don't need to see outputs for everything. Unless you want to be a rebel.  </li> <li>Display warnings, notes, etc.  </li> </ul>"},{"location":"book/CH1/chapter1/#keeping-output-on-the-same-line","title":"Keeping output on the same line","text":"<p>Notice the \"WOW\" ending separator. end: adds on a string the the end of your print statement  </p> <pre><code>print('This is one line.', end= 'WOW')\nprint('This is a second line.', end= ' ')\nprint('This is a third line.')\n</code></pre>"},{"location":"book/CH1/chapter1/#moving-output-to-the-next-line","title":"Moving output to the next line","text":"<p>newline character: \\n  </p> What is an Escape Sequence? <p> Note the backslash is an escape sequence. An escape sequence is a string that has a special meaning, like the newline character \"\\n\", that always starts with a backslash \"\\\". Other escape sequences exist, such as \"\\t\" to insert a tab, or \"\\\" to print an actual backslash character.</p> <pre><code>print('This is one line.', end= '\\n')\nprint('This is a second line.', end= ' ')\nprint('This is a third line.')\n</code></pre>"},{"location":"book/CH1/chapter1/#basic-input","title":"Basic input","text":"<p>The input() function: is used to read input from a user. The statement best_friend = input() will read text entered by the user, and assign the result as a new string to the best_friend variable. The input() function causes the program to wait until the user has entered text and pushed the return key.  </p> <pre><code>input('Write something here to show as a notification before a user puts input')\n\n# You don't need to have a string as a parameter like below, notice this is a comment because of #\n\ninput()\n</code></pre> \ud83e\udd96 Example - input() <p>Have a user input a value and store it as a variable for later use. Ex. Get users body weight, age, sex, and height to calculate BMI.</p> <p>Note</p> <p>Just remember input() receives everything as a string. If you want to store as an integer, you must convert.  </p>"},{"location":"book/CH1/chapter1/#14-errors","title":"1.4 Errors","text":"<p>Syntax Errors: Violates the programming language rules. Basically Python does not understand what you want to do.  </p> <p>Runtime Errors: Syntax is correct, however the operation is impossible to run.  </p> <p>Crash: Abrupt termination of a program  </p> \ud83e\udd96 Example - Error <p>The error pinpoints to the line where the error occurred and labels the error accordingly. </p>"},{"location":"book/CH1/chapter1/#common-error-types","title":"Common Error Types","text":"Error type Description SyntaxError The program contains invalid code that cannot be understood. IndentationError The lines of the program are not properly indented. ValueError An invalid value is used, which can occur if giving letters to int(). NameError The program tries to use a variable that does not exist. TypeError An operation uses incorrect types, which can occur if adding an integer to a string. <p>Logic Errors / Bugs: Errors that run correctly but not behave as intended.  </p> \ud83e\udd96 Example - Logic Error <p> You fat fingered some numbers on a spreadsheet, therefore your numbers are off. Everything ran correctly, however the output is not as intended.  </p>"},{"location":"book/CH1/chapter1/#15-development-environment","title":"1.5 Development environment","text":"<p>Integrated Development Environment (IDE) Any development of code is usually conducted in an IDE.  </p> <p>Some Software IDE you can download to code in Python:  </p> <ol> <li>VSCode</li> <li>Sublime Text</li> <li>IDLE, Python Interpreter</li> <li>Thonny</li> <li>Spyder</li> <li>Jupyter Notebooks </li> </ol>"},{"location":"book/CH1/chapter1/#16-computers-and-programs-general","title":"1.6 Computers and programs (general)","text":"<p>First think of a light switch</p> <ul> <li> On \ud83c\udf15 or True or 1</li> <li> Off \ud83c\udf11 or False or 0</li> </ul> <p>The oldest computers were built on large components with the general idea of using switches (on or off) to perform simple calculations.</p> \ud83e\udd96 Example <p> Imagine people constantly switching a line to connect you to another person via telephone hard line. - The analogy here is when a person switches the connection, they connect you to another hard line. Meaning they turn on the switch manually  </p> <ul> <li> I just connected you to another line to communicate to Mr. Columbus.  </li> <li> I just removed the connection to the line communicating with me, your friendly operator.</li> </ul> <p>Bits:  Binary digits consisting of 1 and 0s  </p> <p>Fast Track to a point where that room with the operator is scaled down to a tiny processor. </p> <ul> <li>There many, many, and many switches occurring in the backend here.  </li> <li>Modern processors contain billions of transistors, these transistors could be thought as switches.  </li> </ul> <p>These processors take in instructions or a list of desired calculations. Instruction: Desired calculation  </p> <p>Example of types of instructions that a processor might use. </p> Output Result Add X, #num, Y Adds data in memory location X to the number num, storing result in location Y Sub X, #num, Y Subtracts num from data in location X, storing result in location Y Mul X, #num, Y Multiplies data in location X by num, storing result in location Y Div X, #num, Y Divides data in location X by num, storing result in location Y Jmp Z Tells the processor that the next instruction to execute is in memory location Z <p>Memory: A Circuit that stores 0s and 1s in each of a series of thousands. </p> <p>The processor interacts with memory or list of desired instructions.  </p> Analogy <p>Creating macros in excel to reuse again later. These macros take in instructions and output something.  The macro is similar to the instructions stored in memory that can be accessed at a later time.  </p> <p>Machine Instructions: Instructions represented by 0s and 1s.  </p> <p>Executable Program: Sequence of instructions.  </p> <p>Assembly: Programs to translate machine instructions to a friendly readable hooman format.  </p> <p>\ud83d\udcd6</p> <p>Back then, programmers coded in 0s and 1s \ud83e\udd72. They soon realized this was a nightmare and created assemblers to translate the machine instructions.  </p> <p>High-level Languages: Language that supported programming using formulas and algorithms.  </p> <ul> <li>FORTRAN (\"Formula Translator\") is one of these languages.  </li> <li>This formula was able to be understood thanks to High-level languages,  F = (9 / 5) * C + 32 </li> </ul> <p>Compilers: Programs to further support high level languages that automatically translate High-Level Languages to executable programs.  </p> <ul> <li>Basically translate hooman code back to machine instructions in order to execute.  </li> </ul> <p>High-Level Language <pre><code>put \"Enter wage: \"\nhourlyWage = Get next input\nput \"Salary is: \"\nput (hourlyWage * 40 * 52)\n</code></pre></p> <p>Executable Program <pre><code>011 1100001 001001 1100010\n100 1100010 000101 1100010\n011 1100010 100000 1100011\n011 1100001 001001 1100010\n</code></pre></p>"},{"location":"book/CH1/chapter1/#17-computer-tour","title":"1.7 Computer tour","text":"<p>I/O (Input / Output): Keyboards, headphones, monitor, peripheral, motherboard, etc.  </p> <p></p> <p>Storage: Hard Drives (HD), Solid State Drives (SSD) that store data. These storage devices are non-volatile, which means they maintain their content even when powered off. </p> <p>How Memory is Maintained?</p> <p>Zybooks They do so by orienting magnetic particles in a 0 or 1 position. The disk spins under a head that pulses electricity at just the right times to orient specific particles (you can sometimes hear the disk spin and the head clicking as the head moves). New flash storage devices store 0s and 1s in a non-volatile memory rather than disk, by tunneling electrons into special circuits on the memory's chip, and removing them with a \"flash\" of electricity that draws the electrons back out.</p> <p>Memory (RAM): Random Access Memory (RAM) temporarily holds data from storage and designed for faster access. RAM is volatile, meaning when the computer shuts off, the memory is wiped.  </p> <ul> <li>Memory size is typically listed in bits/bytes where a byte is 8 bits.</li> </ul> <p> </p> <p>Random Access</p> <p>Zybooks The \"random access\" term comes from accessing any memory location quickly and in arbitrary order, without spinning a disk to get a proper location under a head.  </p> <p>Processor: Runs computer programs which reads and executes instructions from memory. Can perform operations of reading and writing data from and into memory.  </p> <ul> <li>Can have its own \"RAM\" memory built in called cache memory.</li> </ul> <p>What happens within a processor?</p> <p>Zybooks When powered on, the processor starts executing the program. The first instruction is typically at memory location 0. That program is commonly called the BIOS (basic input/output system), which sets up the computer's basic peripherals. The processor executes a program called an operating system (OS). The operating system allows a user to run other programs and interfaces with the many other peripherals. Processors are also called CPUs (central processing unit) or microprocessors (a term introduced when processors began fitting on a single chip, the \"micro\" suggesting its small size). Because speed is so important, a processor may contain a small amount of RAM on its own chip, called cache memory, accessible in one clock tick rather than several, for maintaining a copy of the most-used instructions/data.</p> <p>Clock: A processor executes instructions at a rate governed by the processor's clock/frequency. </p> <ul> <li>They have clocks ranging from 3 GHz to say 5 GHz. (1 GHz is 1 billion ticks/second)  </li> </ul> <p>Computers can run multiple instructions/programs simultaneously.</p> <p>Integrated Circuit (IC): Many transistors/switches on a single chip.  </p> <p>Moore's Law: Doubling the capacity of IC roughly every 18 months. (The number of switches/transistors increases doubles within the same size)</p> <ul> <li>This is lately decreased (not doubling), however still making improvements.  </li> </ul>"},{"location":"book/CH1/chapter1/#18-language-history","title":"1.8 Language history","text":"<p>Guido van Rossum: The person who created Python in the late 1980s  </p> <ul> <li>Python was derived from an existing language ABC  </li> <li>Python came from the TV Show Monty Python's Flying Circus, which Guido liked.  </li> <li>The goal for the language is simplicity and readability.</li> <li> <p>Python is open-source(1)</p> <ol> <li>The community (even you) can participate in defining the language and creating new interpreters.  </li> </ol> </li> </ul>"},{"location":"book/CH1/chapter1/#19-why-whitespace-matters","title":"1.9 Why whitespace matters","text":"What is whitespace? <p>Any blank space or newline. <pre><code>  \u2b05\ufe0f White space (3 spaces)\n    \u2b05\ufe0f a Tab, also white space\n\n\u2b06\ufe0f Above blank line is white space.  \n</code></pre></p> <p>Programming requires precision and attention to detail.</p> \ud83e\udd96 Example <ul> <li>= and == have different meanings</li> <li>=! and != only one of these is recognized</li> </ul> <p>The general idea is, get the foundational knowledge in syntax and spacing correct to avoid future grueling headaches.  </p> Do you struggle with attention to details at times? <p>YES! We all do and its okay. We do not have to be a perfectionist when we start typing. There are best practices we can go through to ensure we have working code.  </p> <ol> <li> <p>Run small bits of code to test the outputs</p> <ul> <li>Testing is best and easier through Jupyter Notebooks. </li> </ul> </li> <li> <p>In development, use many print statements to show your output.  </p> <ul> <li>As you get better, you will use less print statements.</li> </ul> </li> </ol> <p>As you gain experience, your attention to detail will become better. </p>"},{"location":"book/CH1/chapter1/#110-python-example-salary-after-taxes-calculation","title":"1.10 Python example: Salary after taxes calculation","text":"<p>Lets get a rough estimate of our net income after taxes. How much are you actually taking home?</p> <p>Lets assume you are filing \"Single\", live in California, and earn $80,000 base salary.  </p> State and Federal Income Brackets <p>Links below for reference of where we got the screenshots. Federal Tax Bracket State Tax Bracket Lets assume you are filing as single for this example. </p> <pre><code>SALARY = 80000\nCaliforniaTax = 3009.40 + (SALARY - 68350) * .093\nStateTax = 5147 + (SALARY - 44725) * .22\nSalaryAfterTax = SALARY - CaliforniaTax - StateTax\n\nprint('This is my Net Income after taxes \ud83d\ude13')\nprint(SalaryAfterTax)\nprint(\"Uncle Sam's cut\")\nprint((CaliforniaTax + StateTax) / SALARY * 100)\nprint('Which means I take home below every month, I still need to remove any insurance and benefit fees')\nprint(SalaryAfterTax / 52 * 4)\n</code></pre>"},{"location":"book/CH2/2.10_RandomNumbers/","title":"Random Numbers","text":""},{"location":"book/CH2/2.10_RandomNumbers/#generating-a-random-number","title":"Generating a random number","text":"<p>We have a built-in random module/library we can use with Python. <code>import random</code> </p> <pre><code># Let's generate a random floating point number\nprint(random.random())\n</code></pre> <p>Random Numbers</p> <p>When generating a random number, just know they are truly not randomized. In the back end, it's using a formula that can reproduce these numbers Pseudo-random(1).     - You can reproduce the same \"random\" numbers using a seed. A seed is a number you can choose for the algorithm to create the sequence of random numbers, if you choose the same seed number, the same random numbers will appear.</p> <ol> <li>\"Pseudo\" in Pseudo-random means \"not actually, but having the appearance of.\" Internally, the random module has an equation to compute the next \"random\" number from the previous one, (invisibly) keeping track of the previous one. For the first call to any random method, no previous random number exists, so the method uses a built-in integer based on the current time, called a seed, to help generate a random number. Since the time is different for each program run, each program will get a unique sequence.  </li> </ol>"},{"location":"book/CH2/2.10_RandomNumbers/#random-numbers-between-a-range","title":"Random numbers between a range","text":"<p>In the statement below, we are telling Python, produce 3 random values and make it a range starting from 0. 0, 1, 2 &lt;- are 3 values. If we go up to 3 (0, 1, 2, 3) then we are saying produce 4 random values. <code>print(random.randrange(3))</code></p>"},{"location":"book/CH2/2.10_RandomNumbers/#defined-ranges","title":"Defined ranges","text":"<p><code>randint(min, max)</code> returns a random integer between min and max inclusive.  </p> <ul> <li>Returns a random integer between 12 and 20 inclusive <code>print(random.randint(12, 20))</code> </li> </ul> <p><code>randrange(min, max)</code> returns a random integer between min and max - 1 inclusive.  </p> <ul> <li>Returns a random integer between 12 and 19 inclusive <code>print(random.randrange(12, 20))</code> </li> </ul>"},{"location":"book/CH2/2.11_RepresentingText/","title":"2.11 Representing Text","text":"<p>Unicode: String variables to represent text.  </p> <p>Code Point: Character with a unique number</p>"},{"location":"book/CH2/2.11_RepresentingText/#unicode","title":"Unicode","text":"<p>We can get the textual representation of a number by using Python's built-in function chr(). chr() will convert the number to a string character. You can copy and past below to get all characters from numbers 32-127.  </p> \ud83e\udd96 Unicode Conversation Example <pre><code>for num in range(32,127):\n    char_converted = chr(num)\n    print(f'{num}: {char_converted}')\n</code></pre> <p><pre><code># Sample Output\n32:  \n33: !\n34: \"\n35: #\n36: $\n37: %\n</code></pre> Convert these character back to numbers using ord()!!!  </p>"},{"location":"book/CH2/2.11_RepresentingText/#escape-sequences","title":"Escape Sequences","text":"<p>Special characters exist to do some sort of operation</p> <p>The <code>\\</code> backslash tells python, don't read the next character as a string, instead do some operation.  </p> <pre><code># Using a n in combination with the escape sequence creates a new line  \nprint('Hello, this is the first line\\nThis is the second line')\n</code></pre> Escape Sequence Explanation Example code Output \\\\ Backslash (\\) print('\\\\home\\\\users\\\\') print('\\home\\users\\') \\ Single quote (') print('Name: John O\\'Donald') Name: John O'Donald \\ Double quote (\") print(\"He said, \\\"Hello friend!\\\"\") He said, \"Hello friend!\" \\n Newline print('My name...\\nIs John...') My name... - - - Is John... <pre><code># Tab example\nprint('hola')\nprint('/tHi I am corgi')\n</code></pre> <p>Output: <pre><code>hola\n    Hi I am corgi\n</code></pre></p>"},{"location":"book/CH2/2.11_RepresentingText/#raw-strings","title":"Raw Strings","text":"<p>Ignore backslashes or escape sequence by starting the string with an \"r\". </p> <pre><code>my_string = 'This is a \\n \\'normal\\' string\\n'\nmy_raw_string = r'This is a \\n \\'raw\\' string'\n</code></pre> <ul> <li>You can concatenate a string adding two strings with a \"+\"</li> </ul>"},{"location":"book/CH2/2.1_VariableAssignments/","title":"2.1 Variables and assignments","text":""},{"location":"book/CH2/2.1_VariableAssignments/#variables","title":"Variables","text":"<p>We finally get to the beauty of what Python, an OOP(1) can do! </p> <ol> <li>object-oriented programming</li> </ol> <p>Variable: Named item, such as x, y, john, lamp.  </p> <p>Assignment Statement: We assign variables with the equal sign \"=\".  </p> <pre><code>x = 13 \u2705\nJohnDoe = 55 \u2705  \n</code></pre> <p>We have to follow certain rules to assign a variable 1. The variable always starts on the left, then =, then your object/value. <code>5 = x</code> \u274c 2. The only way to assign something to a variable is by using = <code>x =&gt; 5</code> \u274c 3. Must start with a letter <code>1x = 5</code>  \u274c 4. Function and Variable Naming Best Practices 5. Names to Avoid </p>"},{"location":"book/CH2/2.1_VariableAssignments/#naming-styles","title":"Naming Styles","text":"<p>PEP 8 Documentation </p> <ul> <li>b (single lowercase letter)</li> <li>B (single uppercase letter)</li> <li>lowercase</li> <li>lower_case_with_underscores</li> <li>UPPERCASE</li> <li>UPPER_CASE_WITH_UNDERSCORES</li> <li>CapitalizedWords (or CapWords, or CamelCase \u2013 so named because of the bumpy look of its letters [4]). This is also sometimes known as StudlyCaps.</li> <li>mixedCase (differs from CapitalizedWords by initial lowercase character!) \u26a0\ufe0f (Try not to use, unless its already common within scripts)</li> <li>Capitalized_Words_With_Underscores (ugly!) \u274c \u274c \u274c   </li> </ul> <p>Note</p> <p>When using acronyms in CapWords, capitalize all the letters of the acronym. Thus HTTPServerError is better than HttpServerError.  </p>"},{"location":"book/CH2/2.2_Identifiers/","title":"2.2 Identifiers","text":"<p>Zybooks</p> <p>identifier / name / underscores: An identifier, also called a name, is a sequence of letters (a-z, A-Z), underscores (_), and digits (0\u20139), and must start with a letter or an underscore.  </p> <p>case sensitive: Python is case sensitive, meaning uppercase and lowercase letters differ. Ex: \"Cat\" and \"cat\" are different.  </p> <p>Reserved words / keywords: Reserved words, or keywords, are words that are part of the language and cannot be used as a programmer-defined name.  </p> <p>PEP 8: PEP 8 (Python Enhancement Proposal) outlines the basics of how to write Python code neatly and consistently.  </p> <p>PEP 8 Styling Guide</p>"},{"location":"book/CH2/2.2_Identifiers/#reserved-words","title":"Reserved Words","text":"<p>Reserved Words</p> <p>Python reserves certain words to work. Example, sum is a word reserved to add numbers. You don't want to override this function. print is another word you don't want to use. <code>print = 13</code> \u274c <code>sum =  13 + 23</code> \u274c  </p> How can we know which words not to use? <p> </p> <p>For now just copy and paste below code in a cell to see the full list.  </p> <ul> <li>We can discuss what it all does a little later.  </li> </ul> <pre><code># Import some built in python libraries to get reserved words\nimport keyword\nimport builtins\n\n# Assign the list to a variable\nkeyword_list = keyword.kwlist\nbuiltin_list = dir(builtins)\n\n# Add the two different lists together\nreserved_words = keyword_list + builtin_list\n\n# Show the output\nprint(f'Number of words to avoid: {len(reserved_words)}')\nprint(reserved_words)\n</code></pre>"},{"location":"book/CH2/2.3_Objects/","title":"Objects","text":"<p>Zybooks Glossary</p> <p>object: An object represents a value and is automatically created by the interpreter when executing a line of code. For example, executing x = 4 creates a new object to represent the value 4.  </p> <p>garbage collection: Deleting unused objects is an automatic process called garbage collection that frees memory space.  </p> <p>Name binding: Name binding is the process of associating names with interpreter objects. An object can have more than one name bound to it, and every name is always bound to exactly one object. Name binding occurs whenever an assignment statement is executed, as demonstrated below.  </p> <p>Objects: Used to represent everything in a Python Program (Integers, strings, functions, lists, etc.)</p> <p>Below works as an example. We assign a emoji to a variable.  </p> <pre><code># Technically we are assigning a string!\nx = '\ud83e\udd96'\nprint(x)\n</code></pre> <p>Garbage Collection: Deleting unused objects is an automatic process.  </p> <p>Name Binding: Process of associating names with interpreter objects. An object can have more than one name bound to it.</p> <p> </p> <p>So when we assign a variable <code>ImBabyTRex = '\ud83e\udd96'</code>, we are essentially creating an object ImBabyTRex. The name has been bound.  </p>"},{"location":"book/CH2/2.3_Objects/#object-properties","title":"Object Properties","text":"<p>Objects has three defining properties. - Value: such as 'Hi Im Baby', 13, '13', etc. - Type: The type of the objects, what is the format? Integer, string, etc? - Identity: Unique identifier that describes the object.  </p> <pre><code>x = '\ud83e\udd96'\n\n# Lets show the value\nprint(x)\n\n# Lets show the type\nprint(type(x))\n\n# Lets show the identity\nprint(id(x))\n</code></pre> <p> </p> <p>print(), type(), and id() are all python built in functions. Meaning, these functions are always available and do not require you to import libraries.  </p>"},{"location":"book/CH2/2.4_NumericTypes/","title":"Numeric Types: Floating-point","text":""},{"location":"book/CH2/2.4_NumericTypes/#float","title":"Float","text":"<p>Floating-point Number: A real number like 13.01, -55.23, or 0.00001  </p> <ul> <li>The term floating-point refers to the decimal point appearing anywhere ('floating') in the number. </li> </ul> <p>float: A data type for floating-point numbers.  </p> <p>A floating-point literal: Written with the fractional part even if that fraction is 0, as in 1.0, 0.0, or 99.0.  </p> <p> </p> <p>Scientific Notation is another way to write a float. It uses the \"e\" to let you know how far you move the \".\" over. 0.003 is the same as 3.0e-3(1)</p> <ol> <li>The -3 tells you to move the decimal to the left \u2b05\ufe0f, while a positive number moves the decimal point to the right \u27a1\ufe0f</li> </ol> <p>float()</p> <p>You can use the float() function to convert your value into a float if possible. - You can't convert 'Hi' into a decimal.  </p>"},{"location":"book/CH2/2.4_NumericTypes/#integer","title":"Integer","text":"<p>We also have whole numbers or integer formats. (A number without a decimal)  </p> <p>int()</p> <p>You can use the int() function to convert your value into an integer if possible. - You can't convert 'Hi' into an integer. </p>"},{"location":"book/CH2/2.4_NumericTypes/#overflow","title":"Overflow","text":"<p>Float-types have a limit to how \"long\" your decimal can be.  </p> <ul> <li>For Python 32 bit installations, the longest float is 1.0e308 or 1.0e-308 (You have 307 zeros, that's a lot)</li> </ul> <p>What happens when your float is too long?</p> <p>Overflow Error: When a value is too large to be stored in the memory allocated by the interpreter.</p>"},{"location":"book/CH2/2.4_NumericTypes/#formatting-floats","title":"Formatting Floats","text":"<p>It's not ideal to work with long float formats. You are hurting the eyes of your veteran peers.  </p> <p>Lets format the floats for readability. We do this with string formats, which we will talk more about this later.</p> <pre><code># Essentially we convert the float to a string and format it to make it look pretty.\nprint(f'{13.12345: .2f}')\n</code></pre> <p> </p> <p>Notice you don't see any commas in floats or integers. This is because they are not allowed in integer/float format. Once you add commas, it will no longer be recognized as a number.  </p>"},{"location":"book/CH2/2.5_ArithmeticExpressions/","title":"Arithmetic Expressions","text":""},{"location":"book/CH2/2.5_ArithmeticExpressions/#basics","title":"Basics","text":"<p>Python can do all the basic operations a calculator can do, and more.  </p> <p>Zybooks</p> <p>expression:  is a combination of items, like variables, literals, operators, and parentheses, that evaluates to a value, like 2 * (x + 1).  </p> <ul> <li>A common place where expressions are used is on the right side of an assignment statement, as in y = 2 * (x + 1).  </li> </ul> <p>literal:  is a specific value in code like 2. An operator is a symbol that performs a built-in calculation, like +, which performs addition. Common programming operators are shown below.  </p> Arithmetic operator Description + The addition operator is +, as in x + y. - The subtraction operator is -, as in x - y. Also, the - operator is for negation, as in -x + y, or x + -y. * The multiplication operator is *, as in x * y. / The division operator is /, as in x / y. ** The exponent operator is **, as in x ** y (x to the power of y)."},{"location":"book/CH2/2.5_ArithmeticExpressions/#evaluation-of-expressions","title":"Evaluation of Expressions","text":"<p>Remember Order of Operations or  precedence rules in Algebra? This is very similar.  </p> Operator/Convention Description Explanation ( ) Items within parentheses are evaluated first. In 2 * (x + 1), the x + 1 is evaluated first, with the result then multiplied by 2. exponent ** ** used for exponent is next. In x**y * 3, x to the power of y is computed first, with the results then multiplied by 3. unary - - used for negation (unary minus) is next. In 2 * -x, the -x is computed first, with the result then multiplied by 2. * / % Next to be evaluated are *, /, and %, having equal precedence. (% is discussed elsewhere.) + - Finally come + and - with equal precedence. In y = 3 + 2 * x, the 2 * x is evaluated first, with the result then added to 3, because * left-to-right If more than one operator of equal precedence could be evaluated, evaluation occurs left to right. Note: The ** operator is evaluated from right-to-left. In y = x * 2 / 3, the x * 2 is first evaluated, with the result then divided by 3. \ud83e\udd96 Examples <pre><code># Addition\n1 + 0\n\n# Multiplication\n1 * 0\n\n# Division\n0 / 1\n\n# Floor Division\n5 // 2\n\n# Exponential\n2 ** 4\n\n# Modulo Example 1\n4 % 2\n\n# Order of Operations\n(1 + 3) * (2 + 2)\n</code></pre>"},{"location":"book/CH2/2.6_PythonExpressions/","title":"2.6 Python Expressions","text":"<p>Best shown by example...  </p> <pre><code>\"\"\" Computes the total cost of leasing a car given the down payment,\n    monthly rate, and number of months \"\"\"\n\ndown_payment = int(input('Enter down payment: '))\npayment_per_month = int(input('Enter monthly payment: '))\nnum_months = int(input('Enter number of months: '))\n\ntotal_cost = down_payment + (payment_per_month * num_months) # \u2b05\ufe0f The expression\n\nprint (f'Total cost: ${total_cost:.2f}')\n</code></pre> <p>Operator Styling</p> <p>Put a single space between operators. <code>5 + 5</code></p> Good practices <p>PEP 8 Styles </p> <pre><code># Correct:\n# easy to match operators with operands\nincome = (gross_wages\n    + taxable_interest\n    + (dividends - qualified_dividends)\n    - ira_deduction\n    - student_loan_interest)\n</code></pre> <p>Other PEP 8 Recommendations <pre><code># Correct:\ni = i + 1\nsubmitted += 1\nx = x*2 - 1\nhypot2 = x*x + y*y\nc = (a+b) * (a-b)\n</code></pre></p>"},{"location":"book/CH2/2.6_PythonExpressions/#compound-operators","title":"Compound Operators","text":"<p>Just another way to short hand some code. Look at the third column and see how its written.(1)</p> <ol> <li>Normally you write in this format to understand the concept. Once you get comfortable, use compound operator version.   </li> </ol> Compound operator Expression with compound operator Equivalent expression Addition assignment age += 1 age = age + 1 Subtraction assignment age -= 1 age = age - 1 Multiplication assignment age *= 1 age = age * 1 Division assignment age /= 1 age = age / 1 Modulo (operator discussed elsewhere) assignment age %= 1 age = age % 1"},{"location":"book/CH2/2.7_DivisionModulo/","title":"2.7 Division &amp; Modulo","text":""},{"location":"book/CH2/2.7_DivisionModulo/#division","title":"Division","text":"<p>Division returns a float. Even if you divide two integers and there isn't a remainder, you still get a float returned. Input: <code>4 / 2</code> Output: <code>2.0</code></p>"},{"location":"book/CH2/2.7_DivisionModulo/#floor-division","title":"Floor Division","text":"<p>Floor division: Used to round down the result of a float to the smallest whole number value. (Returns an integer) Noted as two back slashes <code>//</code> </p> <p>Input: <code>5 // 3</code>(1) Output: <code>1</code></p> <ol> <li>5 / 3 approximately is 1.6667, lowest integer is 1  </li> </ol>"},{"location":"book/CH2/2.7_DivisionModulo/#modulo","title":"Modulo","text":"<p> The Modulo Operator: Evaluates the remainder of the division. Noted as <code>%</code> </p> <p>Input: <code>5 % 3</code>(1) Output: <code>2</code></p> <ol> <li>5 / 3 approximately is 1 with a remainder of 2, so we get the remainder 2.  </li> </ol>"},{"location":"book/CH2/2.8_ModuleBasics/","title":"2.8 Module Basics","text":""},{"location":"book/CH2/2.8_ModuleBasics/#different-formats-to-save-python-files","title":"Different Formats to Save Python Files","text":""},{"location":"book/CH2/2.8_ModuleBasics/#py-extension","title":".py extension","text":"<p>When you save a python file as 'SomeSmartName.py', you create a simple python file that is similar to a txt file. In this file, you will see many lines of code, all of which creates a script.  </p> .py example <p>Notice it the same as a text file, with the difference of having python syntax within and a different extention. </p> How do you run the script <p> </p>"},{"location":"book/CH2/2.8_ModuleBasics/#cli-way","title":"CLI Way","text":"<p>For .py extensions, you can use your CLI to execute the script. You open you cli and type in the file name and path to execute.  </p> <ul> <li>If you are in the same folder of your .py file, then use below command. <code>python SomeSmartName.py</code> </li> </ul>"},{"location":"book/CH2/2.8_ModuleBasics/#gui-way","title":"GUI Way","text":"<p>Assuming you are using VS Code, you can hit the play button at the top right.  </p> Play Button <p></p>"},{"location":"book/CH2/2.8_ModuleBasics/#ipynb-interactive-python-notebook","title":".ipynb (Interactive Python Notebook)","text":"<p>We will be working with .ipynb closely due to its modular architecture. Unlike .py files, with Jupyter Notebook style, we have blocks of cells that can be individually executed.  </p> .ipynb example <p></p> <ul> <li>You cannot run .ipynb from CLI with python's built in capabilities. You would need to import libraries to do so.</li> <li>You run Jupyter style notebooks from the IDE normally.</li> <li>Having blocks of cells allows you to have more flexibility to develop and test your code.</li> <li>Better visualization outputs</li> <li>Friendlier to work with and easier for the eyes.</li> </ul>"},{"location":"book/CH2/2.8_ModuleBasics/#use-case-scenario","title":"Use Case Scenario","text":"<p>When to use .py or .ipynb for production environments? (Work settings) It depends on the use case. </p>"},{"location":"book/CH2/2.8_ModuleBasics/#when-you-have-a-on-premise-server","title":"When you have a on-premise server","text":"<p>Meaning your company owns the computers and servers and are physically on site.  - If you plan to run your scripts on a schedule utilizing the server, then saving .py files on the server would be beneficial. - This way, windows server can execute that python.py file on a frequency.</p>"},{"location":"book/CH2/2.8_ModuleBasics/#when-you-want-to-upload-your-script-to-cloud","title":"When you want to upload your script to cloud","text":"<ul> <li>What if you want to execute a TransformData.py every hour. You would upload your .py file onto the cloud and use the cloud's software to set up the execution frequency.</li> </ul>"},{"location":"book/CH2/2.8_ModuleBasics/#when-you-work-with-databricks-or-azure-notebooks-or-another-cloud-technology-that-utilizes-notebooks","title":"When you work with Databricks, or Azure Notebooks, or another cloud technology that utilizes notebooks","text":"<p>If this is the case, you mostly work with .ipynb</p> <ul> <li>This is because these SAAS applications with notebook features can schedule workflows to run all of your notebook cells.</li> <li>This environment is common for data analyst, data engineers, and data scientists.</li> </ul> <p>To Summarize</p> <p>Realistically you might end up working with both with an emphasis on another format. So get to know both!  </p>"},{"location":"book/CH2/2.8_ModuleBasics/#module-stuff","title":"Module Stuff","text":"<p>Script: Programmers typically write Python program code in a file called a script.  </p> <p>Module: A module is a file containing Python code that can be used by other modules or scripts.  </p> import Module <p>Basically you create a function within a .py file. You can now import this Module/function into another script to reuse it.  </p> <p>Import: A module is made available for use via the import statement.  </p> <ul> <li>Python's built in function, this is how you use more libraries once downloaded.</li> <li>Analogy, this is how you can reuse functions and classes you create or use other people's functions and classes created.</li> </ul> <p>Dot Notation Once a module is imported, any object defined in that module can be accessed using dot notation.  </p> Dot example <p>Assuming you have created a MyFirstFunction.py file with a function called bmi_calculator. On a new notebook or .py</p> <ol> <li><code>import MyFirstFunction</code> </li> <li>`MyFirstFunction.bmi_calculator'</li> </ol> <p>Using the . allows you to bring any function or class in from that module or .py file.</p> <p>__name__: Python programs often use the built-in special name __name__ to determine if the file was executed as a script by the programmer or imported by another module.  </p> Why use __name__ <p>When we import a module or .py file, we essentially run all of the script unless we explicitly put below.  </p> <pre><code># Is this the main file we are running or is it essentially an import?\nif __name__ == '__main__':\n    # If this is the main file, lets run the meat and potatoes of this script\n    main()\nelse:\n    # If this is not the main file, lets just run below function OR do nothing at all (to import functions)\n    some_other_function()\n</code></pre> <p>Sometimes we don't want to run everything within the module, just want to grab a few functions. This is when /name really helps.  </p>"},{"location":"book/CH2/2.9_MathModule/","title":"Math Module","text":"<p>Python has a built in <code>math</code> module for advanced math operations.  </p> <pre><code>import math\n\nnum = 144\nsqrt_num = math.sqrt(num)\nprint(sqrt_num)\n</code></pre> <p>functions</p> <p>sqrt(), print(), sum(), etc. are functions. function: List of statements that can be executed by simply referring to the functions name.  </p> <ul> <li>The analogy would be similar to creating a script and assigning to a variable to reuse. </li> </ul> How do you know if its a function? <p> If everyone is able to create functions and share, how do we get a list of all of these functions? We don't. We can only get a list of python's built in functions with below script. </p> <pre><code>import builtins\nprint(dir(builtins))\n</code></pre> <p>For all other functions, once we import the library, we can get the list of all functions like below. dir() is a built in function that shows attributes of an object.  </p> <ul> <li>VSCode IntelliSense will be able to tell you if its a function with dot notation. <pre><code># This will print all the available functions, classes, and variables within SomeModuleName\nimport SomeModuleName\nprint(dir(SomeModuleName))\n</code></pre></li> </ul>"},{"location":"book/CH2/2.9_MathModule/#commonly-used-math-module-functions","title":"Commonly Used Math Module Functions","text":"Function Description Function Description ceil(x) Round-up value fabs(x) Absolute value factorial(x) factorial (3! = 3 * 2 * 1) floor(x) Round-down value fmod(x, y) Remainder of division fsum(x) Floating-point sum of a range, list, or array. exp(x) Exponential function ex log(x, (base)) Natural logarithm; base is optional pow(x, y) Raise x to power y sqrt(x) Square root acos(x) Arc cosine asin(x) Arc sine atan(x) Arc tangent atan2(y, x) Arc tangent with two parameters cos(x) Cosine sin(x) Sine hypot(x1, x2, x3, ..., xn) Length of vector from origin degrees(x) Convert from radians to degrees radians(x) Convert degrees to radians tan(x) Tangent cosh(x) Hyperbolic cosine sinh(x) Hyperbolic sine gamma(x) Gamma function erf(x) Error function pi (constant) Mathematical constant 3.141592... e (constant) Mathematical constant 2.718281..."},{"location":"book/CH3/3.1_StringBasics/","title":"String Basics","text":"<p>string: A string is a sequence of characters, like the text MARY, that can be stored in a variable.  </p> <p>string literal: A string literal is a string value specified in the source code of a program.  </p> <p>sequence type: Sequence type: A type that specifies a collection of objects ordered from left to right.</p> <p>len()</p> <p>Python Built in function to find the length of a string (How many characters are within the string?).  </p> <p>Input: <code>len('moy')</code> Output: <code>3</code></p>"},{"location":"book/CH3/3.1_StringBasics/#brackets-slicing","title":"Brackets / Slicing","text":"<p>When you use <code>[]</code>, you are saying I want to cut this string a certain way using indexes. - Note that the index will always start with 0</p> \ud83e\udd96 Example <p>Let's use <code>'wowmom'</code> as an example. </p> <p>Grab the first letter <code>'wowmom'[0]</code> </p> <p>Grab wow <code>'wowmom'[:3]</code> </p> <p>Grab mom <code>'wowmom'[3:7]</code> or <code>'wowmom'[3:]</code> </p> <ul> <li>Notice I am not doing <code>'wowmom'[:2]</code>  to grab wow</li> <li>This is because when slicing within a range using the \":\", the last number in the range is minus 1  </li> <li>Meaning, if I want to get indexes 0-5, I have to slice like so <code>[:6]</code> ([:6 - 1])</li> </ul>"},{"location":"book/CH3/3.1_StringBasics/#changing-string-variables","title":"Changing String Variables","text":"<p>Strings are immutable and cannot be changed <pre><code>alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\n# Change to upper case\n\nalphabet[0] = 'A'  # Invalid: Cannot change character\nalphabet[1] = 'B'  # Invalid: Cannot change character\n\nprint('Alphabet:', alphabet)\n</code></pre></p>"},{"location":"book/CH3/3.2_ListBasics/","title":"3.2 List Basics","text":"<p>container: A container is a construct used to group related values together and contains references to other objects instead of data.  </p> <p>list: A list is a container created by surrounding a sequence of variables or literals with brackets [ ].  </p> lists <p>[something, integer, maybe a string, float?, more things] <code>hey_you = 15</code> <code>[13.0, '13', 'hi', hey_you]</code> </p> <p>element: A list item is called an element.  </p> <p>index: Elements are ordered by position in the list, known as the element's index, starting with 0.  </p> <p>index example</p> <p><code>[13.0, '13', 'hi', hey_you]</code> The index output of above items are.. <code>[0, 1, 2, 3]</code> index of 4 is? Error, we only have 4 items and we start at 0. Index of 4 says we have at least 5 elements. index of 3 is? <code>hey_you</code> variable!  </p> <p>method: A method instructs an object to perform some action, and is executed by specifying the method name following a \".\" symbol and an object.  </p> <p>method example</p> <p>For our strings example, python allows us to perform actions, like a split. <code>'a string of something'.split()</code> </p> <p>Or below syntax.</p> <pre><code>my_string = 'a string os something'\n\n# We store the split string into a variable. Split return a list of strings\nstring_list = my_string.split()\n</code></pre> <p>append(): The append() list method is used to add new elements to a list.  </p> <p>append() example</p> <p>Below works as well, why use append? <pre><code>x = [1, 2]\ny = [3, 4]\n\nadded_list = x + y\n</code></pre></p> <p>With append, we actually change the list in place, which means we don't have to assign the added lists to a new variable! <pre><code>x = [1, 2]\ny = [3, 4]\n\n# Lets change the list within the x variable\n# Notice, we can only append one element at a time\nx.append(3)\nx.append(4)\n</code></pre> Output of x: <code>[1, 2, 3, 4]</code> </p> <p>We didn't need to do an new assignment!  </p> <p>pop() / remove(): Elements can be removed using the pop() or remove() methods.  </p> <p>pop()</p> <p>pop() by default removes the last element in the list.  </p> <ul> <li>You can be specific and remove an element from the list utilizing the index position.  </li> <li><code>pop[0]</code> will eliminate the first element and also grabs the eliminated element.  </li> </ul> <p>Let's store the popped value into a variable like below. <pre><code>somelist = ['hi', 13, 'Friday']  \nextract_last_element = somelist.pop()  \nprint(somelist)  \nprint(extract_last_element)  \n</code></pre> Output: <pre><code>['hi',13]\n'Friday'\n</code></pre></p> <p>with <code>remove()</code>, you can remove the actual name of the element instead of using indexes. <pre><code>somelist.remove('hi')\nprint(somelist)\n</code></pre></p> <p>Output: <code>[13, 'Friday']</code> </p>"},{"location":"book/CH3/3.2_ListBasics/#modify-the-lists","title":"Modify the lists","text":"<p>Use slicing to modify an element within the list</p> <p>modify</p> <p><pre><code>list_a = [13, 14, 15]\nlist_a[0] = 'WOW'\nprint(list_a)\n</code></pre> You can see the 13 if poof, no longer. Output: <code>['WOW', 14, 15]</code> </p>"},{"location":"book/CH3/3.2_ListBasics/#sequence-type-functions","title":"Sequence type functions","text":"<p>You can also do many neat things to lists. Similar to a column in excel.  </p> Operation Description len(list) Find the length of the list. list1 + list2 Produce a new list by concatenating list2 to the end of list1. min(list) Find the element in the list with the smallest value. All elements must be of the same type. max(list) Find the element in the list with the largest value. All elements must be of the same type. sum(list) Find the sum of all elements of a list (numbers only). list.index(val) Find the index of the first element in the list whose value matches val. list.count(val) Count the number of occurrences of the value val in the list."},{"location":"book/CH3/3.3_TupleBasics/","title":"3.3 Tuple Basics","text":"<p>tuple: A tuple, usually pronounced \"tuhple\" or \"toople,\" stores a collection of data, like a list, but is immutable \u2013 once created, the tuple's elements cannot be changed.  </p> <p>tuples</p> <p>Treat tuples as a list that cannot be changed. This is useful if you want to hard code global values for everyone to use. Ex. A calendar, week day names, categories, etc.  </p> <p>named tuple: Named tuple allows the programmer to define a new simple data type that consists of named attributes.  </p> <p>Named Tuples</p> <p>This is new to python, you won't really need to use this for our class. I don't have a real use case for named tuples in data analytics. Just be aware it's possible to create attributes and data types. You can create attributes with class, which is more likely to be used.</p> <p>In order to create a named tuple, you have to use an import. <pre><code># Imports namedtuple function in order to create a named tuple\nfrom collections import namedtuple\n\n# Create an object that hold tuple attributes\nwizard = namedtuple('wizard', ['wizard_name', 'power_level', 'wand'])\n\n# Create an object and assign these attributes to a variable\nharry_potter = wizard('Harry Potter', 1000, 'dragon')\n\n# Show attributes\nprint(harry_potter)\n</code></pre></p> <p>Output: <code>wizard(wizard_name='Harry Potter', power_level=1000, wand='dragon')</code> </p>"},{"location":"book/CH3/3.4_DictionaryBasics/","title":"3.4 Dictionary Basics","text":"<p>Dictionaries are versatile and highly used in my data analytics experience! Get to know how to use dictionaries!  </p> Use cases <p>You will most likely work with JSON files. You can convert these into dictionaries to further parse out the information.  </p> <ol> <li>You might need to get data from an API call that comes in JSON format and create a table.</li> <li>You might need to work with IoT Telemetry data that outputs only key value pairs and create tables.</li> <li>It might be easier to convert outputs from legacy systems into JSON to work with.</li> </ol> <p>All this to say, dictionaries are your go to for working with pandas, spark tables, and anything database related.  </p> <p> </p> <p>Fun Fact</p> <p>When I learned Python, dictionaries were not able to store data in an ordered format. Meaning, the order in which you stored data would move around \ud83e\udd72.  </p> <p>This is no longer true. With Python's updates, Dictionaries now hold the order in which they were entered! Good for tables and reports.  </p> <p>dictionary: A dictionary is a Python container used to describe associative relationships.</p> <p>dict: A dictionary is represented by the dict object type.  </p> <p>key: A key is a term that can be located in a dictionary, such as the word \"cat\" in the English dictionary.  </p> <p>value: A value describes some data associated with a key, such as a definition.  </p> <p>curly braces / key:value pairs: A dict object is created using curly braces { } to surround the key:value pairs that comprise the dictionary contents.  </p> <p>Do not confuse yourself with sets</p> <p><code>set()</code> also has <code>{}</code> as</p>"},{"location":"book/CoolStuff/PythonClassUseCase/","title":"PythonClassUseCase","text":"<pre><code># First, lets create a classroom class without any inheritance \nclass ClassRoom:\n    # This is a class attribute that will be available to all instances created.\n    ClassType = 'IS 640 Business Application Programming'\n\n    # This is where we create instance attributes\n    def __init__(self, student):\n        # We assign the student attribute the student\n        self.student = student\n\n    # This is a cool function that python recognizes __repr__. \n    # It allows us to tell python what to do when we print() the class\n    def __repr__(self) -&amp;gt; str:\n        return f'Class: {self.ClassType}\\nstudent: {self.student}\\n'\n</code></pre> <pre><code>ClassRoom.ClassType\n</code></pre> <pre>\n<code>'IS 640 Business Application Programming'</code>\n</pre> <pre><code>student_1 = ClassRoom(student='Harry')\nstudent_2 = ClassRoom(student='Hermione')\n</code></pre> <pre><code>print(student_1)\nprint(student_2)\n</code></pre> <pre>\n<code>Class: IS 640 Business Application Programming\nstudent: Harry\n\nClass: IS 640 Business Application Programming\nstudent: Hermione\n\n</code>\n</pre> <pre><code># I am changing the class type will will affect ALL Instances\nClassRoom.ClassType = 'Defense Against the Dark Arts'\n</code></pre> <pre><code>print(student_1)\nprint(student_2)\n</code></pre> <pre>\n<code>Class: Defense Against the Dark Arts\nstudent: Harry\n\nClass: Defense Against the Dark Arts\nstudent: Hermione\n\n</code>\n</pre> <pre><code># Modify the instance attribute\nstudent_1.student = 'Harry Potter'\n</code></pre> <pre><code>print(student_1)\n</code></pre> <pre>\n<code>Class: Defense Against the Dark Arts\nstudent: Harry Potter\n\n</code>\n</pre> <pre><code>class ClassRoom:\n    ClassType = 'IS 640 Business Application Programming'\n\n    def __init__(self):\n        # Keep a list a students here\n        self.students = []\n\n    # Create a function to add students\n    def add_student(self, student):\n        self.students.append(student)\n\n    # Define how you want to print statement to output your class\n    def __repr__(self) -&amp;gt; str:\n        the_output = f'Classroom: {self.ClassType}\\nStudents: {', '.join(self.students)}'\n        return the_output\n</code></pre> <pre><code>classroom = ClassRoom()\n</code></pre> <pre><code>print(ClassRoom())\n</code></pre> <pre>\n<code>Classroom: IS 640 Business Application Programming\nStudents: \n</code>\n</pre> <pre><code>classroom.add_student('Mr.Moy')\n</code></pre> <pre><code>print(classroom)\n</code></pre> <pre>\n<code>Classroom: IS 640 Business Application Programming\nStudents: Mr.Moy\n</code>\n</pre> <pre><code>classroom.add_student('John')\n</code></pre> <pre><code>print(classroom)\n</code></pre> <pre>\n<code>Classroom: IS 640 Business Application Programming\nStudents: Mr.Moy, John\n</code>\n</pre>"},{"location":"book/CoolStuff/PythonClassUseCase/#lets-learn-how-to-create-classes","title":"Lets Learn how to create Classes","text":"<p>class ClassRoom: is the same as class ClassRoom():</p>"},{"location":"book/CoolStuff/PythonClassUseCase/#lets-alter-the-class-classroom-to-add-students","title":"Lets alter the class Classroom to add students!","text":""},{"location":"book/Notebooks/Ch1/","title":"Ch1","text":"<pre><code>import os\n</code></pre> <pre><code># types\ntype(1)\n</code></pre> <pre>\n<code>int</code>\n</pre> <pre><code># types\ntype(1.4)\n</code></pre> <pre>\n<code>float</code>\n</pre> <pre><code>print('Hello World')\n</code></pre> <pre>\n<code>Hello World\n</code>\n</pre> <pre><code>import pandas as pd\n</code></pre> <pre><code>pd.DataFrame({'col1':[1,2,3], 'col2':['1','2','3']})\n</code></pre> col1 col2 0 1 1 1 2 2 2 3 3 <pre><code># Error\n1 / 0\n</code></pre> <pre>\n---------------------------------------------------------------------------\nZeroDivisionError                         Traceback (most recent call last)\nCell In[7], line 2\n      1 # Error\n----&gt; 2 1 / 0\n\nZeroDivisionError: division by zero</pre> <pre><code>SALARY = 80000\ncaliforniaTax = 3009.40 + (SALARY - 68350) * .093\nstateTax = 5147 + (SALARY - 44725) * .22\nsalaryAfterTax = SALARY - californiaTax - stateTax\n\nprint('This is my Net Income after taxes \u00f0\u0178\u02dc\u201c')\nprint(salaryAfterTax)\nprint(\"Uncle Sam's cut\")\nprint((californiaTax + stateTax) / SALARY * 100)\nprint('Which means I take home below every month, I still need to remove any insurance and benefit fees')\nprint(salaryAfterTax / 52 * 4)\n</code></pre> <pre>\n<code>This is my Net Income after taxes \u00f0\u0178\u02dc\u201c\n62999.649999999994\nUncle Sam's cut\n21.2504375\nWhich means I take home below every month, I still need to remove any insurance and benefit fees\n4846.126923076923\n</code>\n</pre> <pre><code>SALARY = 80000\nCaliforniaTax = 3009.40 + (SALARY - 68350) * .093\nStateTax = 5147 + (SALARY - 44725) * .22\nSalaryAfterTax = SALARY - CaliforniaTax - StateTax\n\nprint('This is my Net Income after taxes \u00f0\u0178\u02dc\u201c')\nprint(SalaryAfterTax)\nprint(\"Uncle Sam's cut\")\nprint((CaliforniaTax + StateTax) / SALARY * 100)\nprint('Which means I take home below every month, I still need to remove any insurance and benefit fees')\nprint(SalaryAfterTax / 52 * 4)\n</code></pre> <pre>\n<code>This is my Net Income after taxes \u00f0\u0178\u02dc\u201c\n62999.649999999994\nUncle Sam's cut\n21.2504375\nWhich means I take home below every month, I still need to remove any insurance and benefit fees\n4846.126923076923\n</code>\n</pre> <pre><code># Import some built in python libraries to get reserved words\nimport keyword\nimport builtins\n\n# Assign the list to a variable\nkeyword_list = keyword.kwlist\nbuiltin_list = dir(builtins)\n\n# Add the two different lists together\nreserved_words = keyword_list + builtin_list\n\n# Show the output\nprint(f'Number of words to avoid: {len(reserved_words)}')\nprint(reserved_words)\n</code></pre> <pre>\n<code>Number of words to avoid: 196\n['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield', 'ArithmeticError', 'AssertionError', 'AttributeError', 'BaseException', 'BaseExceptionGroup', 'BlockingIOError', 'BrokenPipeError', 'BufferError', 'BytesWarning', 'ChildProcessError', 'ConnectionAbortedError', 'ConnectionError', 'ConnectionRefusedError', 'ConnectionResetError', 'DeprecationWarning', 'EOFError', 'Ellipsis', 'EncodingWarning', 'EnvironmentError', 'Exception', 'ExceptionGroup', 'False', 'FileExistsError', 'FileNotFoundError', 'FloatingPointError', 'FutureWarning', 'GeneratorExit', 'IOError', 'ImportError', 'ImportWarning', 'IndentationError', 'IndexError', 'InterruptedError', 'IsADirectoryError', 'KeyError', 'KeyboardInterrupt', 'LookupError', 'MemoryError', 'ModuleNotFoundError', 'NameError', 'None', 'NotADirectoryError', 'NotImplemented', 'NotImplementedError', 'OSError', 'OverflowError', 'PendingDeprecationWarning', 'PermissionError', 'ProcessLookupError', 'RecursionError', 'ReferenceError', 'ResourceWarning', 'RuntimeError', 'RuntimeWarning', 'StopAsyncIteration', 'StopIteration', 'SyntaxError', 'SyntaxWarning', 'SystemError', 'SystemExit', 'TabError', 'TimeoutError', 'True', 'TypeError', 'UnboundLocalError', 'UnicodeDecodeError', 'UnicodeEncodeError', 'UnicodeError', 'UnicodeTranslateError', 'UnicodeWarning', 'UserWarning', 'ValueError', 'Warning', 'WindowsError', 'ZeroDivisionError', '__IPYTHON__', '__build_class__', '__debug__', '__doc__', '__import__', '__loader__', '__name__', '__package__', '__spec__', 'abs', 'aiter', 'all', 'anext', 'any', 'ascii', 'bin', 'bool', 'breakpoint', 'bytearray', 'bytes', 'callable', 'chr', 'classmethod', 'compile', 'complex', 'copyright', 'credits', 'delattr', 'dict', 'dir', 'display', 'divmod', 'enumerate', 'eval', 'exec', 'execfile', 'filter', 'float', 'format', 'frozenset', 'get_ipython', 'getattr', 'globals', 'hasattr', 'hash', 'help', 'hex', 'id', 'input', 'int', 'isinstance', 'issubclass', 'iter', 'len', 'license', 'list', 'locals', 'map', 'max', 'memoryview', 'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'print', 'property', 'range', 'repr', 'reversed', 'round', 'runfile', 'set', 'setattr', 'slice', 'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'vars', 'zip']\n</code>\n</pre> <pre><code>import builtins\nprint(dir(builtins))\n</code></pre> <pre>\n<code>['ArithmeticError', 'AssertionError', 'AttributeError', 'BaseException', 'BaseExceptionGroup', 'BlockingIOError', 'BrokenPipeError', 'BufferError', 'BytesWarning', 'ChildProcessError', 'ConnectionAbortedError', 'ConnectionError', 'ConnectionRefusedError', 'ConnectionResetError', 'DeprecationWarning', 'EOFError', 'Ellipsis', 'EncodingWarning', 'EnvironmentError', 'Exception', 'ExceptionGroup', 'False', 'FileExistsError', 'FileNotFoundError', 'FloatingPointError', 'FutureWarning', 'GeneratorExit', 'IOError', 'ImportError', 'ImportWarning', 'IndentationError', 'IndexError', 'InterruptedError', 'IsADirectoryError', 'KeyError', 'KeyboardInterrupt', 'LookupError', 'MemoryError', 'ModuleNotFoundError', 'NameError', 'None', 'NotADirectoryError', 'NotImplemented', 'NotImplementedError', 'OSError', 'OverflowError', 'PendingDeprecationWarning', 'PermissionError', 'ProcessLookupError', 'RecursionError', 'ReferenceError', 'ResourceWarning', 'RuntimeError', 'RuntimeWarning', 'StopAsyncIteration', 'StopIteration', 'SyntaxError', 'SyntaxWarning', 'SystemError', 'SystemExit', 'TabError', 'TimeoutError', 'True', 'TypeError', 'UnboundLocalError', 'UnicodeDecodeError', 'UnicodeEncodeError', 'UnicodeError', 'UnicodeTranslateError', 'UnicodeWarning', 'UserWarning', 'ValueError', 'Warning', 'WindowsError', 'ZeroDivisionError', '__IPYTHON__', '__build_class__', '__debug__', '__doc__', '__import__', '__loader__', '__name__', '__package__', '__spec__', 'abs', 'aiter', 'all', 'anext', 'any', 'ascii', 'bin', 'bool', 'breakpoint', 'bytearray', 'bytes', 'callable', 'chr', 'classmethod', 'compile', 'complex', 'copyright', 'credits', 'delattr', 'dict', 'dir', 'display', 'divmod', 'enumerate', 'eval', 'exec', 'execfile', 'filter', 'float', 'format', 'frozenset', 'get_ipython', 'getattr', 'globals', 'hasattr', 'hash', 'help', 'hex', 'id', 'input', 'int', 'isinstance', 'issubclass', 'iter', 'len', 'license', 'list', 'locals', 'map', 'max', 'memoryview', 'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'print', 'property', 'range', 'repr', 'reversed', 'round', 'runfile', 'set', 'setattr', 'slice', 'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'vars', 'zip']\n</code>\n</pre> <pre><code>federal_tax_bracket = (\n    (0, (0, .10))\n    ,(11000, (1100, .12))\n    ,(44725, (5147, .22))\n    ,(95375, (16290, .24))\n    ,(182100, (37104, .32))\n    ,(231250, (52832, .35))\n    ,(578125, (174238.25, .37))\n)\n</code></pre> <pre><code>income = 30000\nnew_range = None\nfor inc, rate in federal_tax_bracket:\n    if income &amp;gt;= inc:\n        new_range = (inc, rate)\n\nprint(new_range[1][0] + new_range[1][1] * (income - new_range[0]))\n</code></pre> <pre>\n<code>3380.0\n</code>\n</pre> <pre><code>def get_taxable_income(income):\n    # Federal tax bracket ranges for single\n    # (Base Range, (Base Pay, Rate Pay))\n    federal_tax_bracket = (\n        (0, (0, .10))\n        ,(11000, (1100, .12))\n        ,(44725, (5147, .22))\n        ,(95375, (16290, .24))\n        ,(182100, (37104, .32))\n        ,(231250, (52832, .35))\n        ,(578125, (174238.25, .37))\n    )\n\n    # California State tax brackets for single\n    state_tax_bracket = ( \n        (0, (0, .01))\n        ,(10412, (104.12, .02))\n        ,(24684, (389.56, .04))\n        ,(38959, (960.56, .06))\n        ,(54081, (1867.88, .08))\n        ,(68350, (3009.4, .093))\n        ,(349137, (29122.59, .103))\n        ,(418961, (36314.46, .113))\n        ,(698271, (67876.49, .123))\n    )\n\n    # Calculate federal tax\n    fed_range = None\n    for inc, rate in federal_tax_bracket:\n        if income &amp;gt;= inc:\n            fed_range = (inc, rate)\n\n    fed_base_range = fed_range[0]\n    fed_base_pay = fed_range[1][0]\n    fed_rate_pay = fed_range[1][1]\n    federal_tax = fed_base_pay + fed_rate_pay * (income - fed_base_range)\n\n    # Calculate state tax\n    state_range = None\n    for inc, rate in federal_tax_bracket:\n        if income &amp;gt;= inc:\n            state_range = (inc, rate)\n\n    state_base_range = state_range[0]\n    state_base_pay = state_range[1][0]\n    state_rate_pay = state_range[1][1]\n    state_tax = state_base_pay + state_rate_pay * (income - state_base_range)\n\n    total_taxed = federal_tax + state_tax\n\n    if total_taxed == 0:\n        percent_taxed = 0\n    else:\n        percent_taxed = total_taxed / income\n\n    print(f'Income: {income}')\n    print(f'You get taxed ${total_taxed:,.2f}, which is {percent_taxed :.0%}')\n    print(f'Which means you really earn ${income - (total_taxed):,.2f}')\n    print(f'Monthly: {(income - (total_taxed)) / 52 * 4:,.2f}')\n    return total_taxed\n</code></pre> <pre><code>for x in range(0, 900000, 10000):\n    get_taxable_income(x)\n    print('\\n')\n</code></pre> <pre>\n<code>Income: 0\nYou get taxed $0.00, which is 0%\nWhich means you really earn $0.00\nMonthly: 0.00\n\n\nIncome: 10000\nYou get taxed $2,000.00, which is 20%\nWhich means you really earn $8,000.00\nMonthly: 615.38\n\n\nIncome: 20000\nYou get taxed $4,360.00, which is 22%\nWhich means you really earn $15,640.00\nMonthly: 1,203.08\n\n\nIncome: 30000\nYou get taxed $6,760.00, which is 23%\nWhich means you really earn $23,240.00\nMonthly: 1,787.69\n\n\nIncome: 40000\nYou get taxed $9,160.00, which is 23%\nWhich means you really earn $30,840.00\nMonthly: 2,372.31\n\n\nIncome: 50000\nYou get taxed $12,615.00, which is 25%\nWhich means you really earn $37,385.00\nMonthly: 2,875.77\n\n\nIncome: 60000\nYou get taxed $17,015.00, which is 28%\nWhich means you really earn $42,985.00\nMonthly: 3,306.54\n\n\nIncome: 70000\nYou get taxed $21,415.00, which is 31%\nWhich means you really earn $48,585.00\nMonthly: 3,737.31\n\n\nIncome: 80000\nYou get taxed $25,815.00, which is 32%\nWhich means you really earn $54,185.00\nMonthly: 4,168.08\n\n\nIncome: 90000\nYou get taxed $30,215.00, which is 34%\nWhich means you really earn $59,785.00\nMonthly: 4,598.85\n\n\nIncome: 100000\nYou get taxed $34,800.00, which is 35%\nWhich means you really earn $65,200.00\nMonthly: 5,015.38\n\n\nIncome: 110000\nYou get taxed $39,600.00, which is 36%\nWhich means you really earn $70,400.00\nMonthly: 5,415.38\n\n\nIncome: 120000\nYou get taxed $44,400.00, which is 37%\nWhich means you really earn $75,600.00\nMonthly: 5,815.38\n\n\nIncome: 130000\nYou get taxed $49,200.00, which is 38%\nWhich means you really earn $80,800.00\nMonthly: 6,215.38\n\n\nIncome: 140000\nYou get taxed $54,000.00, which is 39%\nWhich means you really earn $86,000.00\nMonthly: 6,615.38\n\n\nIncome: 150000\nYou get taxed $58,800.00, which is 39%\nWhich means you really earn $91,200.00\nMonthly: 7,015.38\n\n\nIncome: 160000\nYou get taxed $63,600.00, which is 40%\nWhich means you really earn $96,400.00\nMonthly: 7,415.38\n\n\nIncome: 170000\nYou get taxed $68,400.00, which is 40%\nWhich means you really earn $101,600.00\nMonthly: 7,815.38\n\n\nIncome: 180000\nYou get taxed $73,200.00, which is 41%\nWhich means you really earn $106,800.00\nMonthly: 8,215.38\n\n\nIncome: 190000\nYou get taxed $79,264.00, which is 42%\nWhich means you really earn $110,736.00\nMonthly: 8,518.15\n\n\nIncome: 200000\nYou get taxed $85,664.00, which is 43%\nWhich means you really earn $114,336.00\nMonthly: 8,795.08\n\n\nIncome: 210000\nYou get taxed $92,064.00, which is 44%\nWhich means you really earn $117,936.00\nMonthly: 9,072.00\n\n\nIncome: 220000\nYou get taxed $98,464.00, which is 45%\nWhich means you really earn $121,536.00\nMonthly: 9,348.92\n\n\nIncome: 230000\nYou get taxed $104,864.00, which is 46%\nWhich means you really earn $125,136.00\nMonthly: 9,625.85\n\n\nIncome: 240000\nYou get taxed $111,789.00, which is 47%\nWhich means you really earn $128,211.00\nMonthly: 9,862.38\n\n\nIncome: 250000\nYou get taxed $118,789.00, which is 48%\nWhich means you really earn $131,211.00\nMonthly: 10,093.15\n\n\nIncome: 260000\nYou get taxed $125,789.00, which is 48%\nWhich means you really earn $134,211.00\nMonthly: 10,323.92\n\n\nIncome: 270000\nYou get taxed $132,789.00, which is 49%\nWhich means you really earn $137,211.00\nMonthly: 10,554.69\n\n\nIncome: 280000\nYou get taxed $139,789.00, which is 50%\nWhich means you really earn $140,211.00\nMonthly: 10,785.46\n\n\nIncome: 290000\nYou get taxed $146,789.00, which is 51%\nWhich means you really earn $143,211.00\nMonthly: 11,016.23\n\n\nIncome: 300000\nYou get taxed $153,789.00, which is 51%\nWhich means you really earn $146,211.00\nMonthly: 11,247.00\n\n\nIncome: 310000\nYou get taxed $160,789.00, which is 52%\nWhich means you really earn $149,211.00\nMonthly: 11,477.77\n\n\nIncome: 320000\nYou get taxed $167,789.00, which is 52%\nWhich means you really earn $152,211.00\nMonthly: 11,708.54\n\n\nIncome: 330000\nYou get taxed $174,789.00, which is 53%\nWhich means you really earn $155,211.00\nMonthly: 11,939.31\n\n\nIncome: 340000\nYou get taxed $181,789.00, which is 53%\nWhich means you really earn $158,211.00\nMonthly: 12,170.08\n\n\nIncome: 350000\nYou get taxed $188,789.00, which is 54%\nWhich means you really earn $161,211.00\nMonthly: 12,400.85\n\n\nIncome: 360000\nYou get taxed $195,789.00, which is 54%\nWhich means you really earn $164,211.00\nMonthly: 12,631.62\n\n\nIncome: 370000\nYou get taxed $202,789.00, which is 55%\nWhich means you really earn $167,211.00\nMonthly: 12,862.38\n\n\nIncome: 380000\nYou get taxed $209,789.00, which is 55%\nWhich means you really earn $170,211.00\nMonthly: 13,093.15\n\n\nIncome: 390000\nYou get taxed $216,789.00, which is 56%\nWhich means you really earn $173,211.00\nMonthly: 13,323.92\n\n\nIncome: 400000\nYou get taxed $223,789.00, which is 56%\nWhich means you really earn $176,211.00\nMonthly: 13,554.69\n\n\nIncome: 410000\nYou get taxed $230,789.00, which is 56%\nWhich means you really earn $179,211.00\nMonthly: 13,785.46\n\n\nIncome: 420000\nYou get taxed $237,789.00, which is 57%\nWhich means you really earn $182,211.00\nMonthly: 14,016.23\n\n\nIncome: 430000\nYou get taxed $244,789.00, which is 57%\nWhich means you really earn $185,211.00\nMonthly: 14,247.00\n\n\nIncome: 440000\nYou get taxed $251,789.00, which is 57%\nWhich means you really earn $188,211.00\nMonthly: 14,477.77\n\n\nIncome: 450000\nYou get taxed $258,789.00, which is 58%\nWhich means you really earn $191,211.00\nMonthly: 14,708.54\n\n\nIncome: 460000\nYou get taxed $265,789.00, which is 58%\nWhich means you really earn $194,211.00\nMonthly: 14,939.31\n\n\nIncome: 470000\nYou get taxed $272,789.00, which is 58%\nWhich means you really earn $197,211.00\nMonthly: 15,170.08\n\n\nIncome: 480000\nYou get taxed $279,789.00, which is 58%\nWhich means you really earn $200,211.00\nMonthly: 15,400.85\n\n\nIncome: 490000\nYou get taxed $286,789.00, which is 59%\nWhich means you really earn $203,211.00\nMonthly: 15,631.62\n\n\nIncome: 500000\nYou get taxed $293,789.00, which is 59%\nWhich means you really earn $206,211.00\nMonthly: 15,862.38\n\n\nIncome: 510000\nYou get taxed $300,789.00, which is 59%\nWhich means you really earn $209,211.00\nMonthly: 16,093.15\n\n\nIncome: 520000\nYou get taxed $307,789.00, which is 59%\nWhich means you really earn $212,211.00\nMonthly: 16,323.92\n\n\nIncome: 530000\nYou get taxed $314,789.00, which is 59%\nWhich means you really earn $215,211.00\nMonthly: 16,554.69\n\n\nIncome: 540000\nYou get taxed $321,789.00, which is 60%\nWhich means you really earn $218,211.00\nMonthly: 16,785.46\n\n\nIncome: 550000\nYou get taxed $328,789.00, which is 60%\nWhich means you really earn $221,211.00\nMonthly: 17,016.23\n\n\nIncome: 560000\nYou get taxed $335,789.00, which is 60%\nWhich means you really earn $224,211.00\nMonthly: 17,247.00\n\n\nIncome: 570000\nYou get taxed $342,789.00, which is 60%\nWhich means you really earn $227,211.00\nMonthly: 17,477.77\n\n\nIncome: 580000\nYou get taxed $349,864.00, which is 60%\nWhich means you really earn $230,136.00\nMonthly: 17,702.77\n\n\nIncome: 590000\nYou get taxed $357,264.00, which is 61%\nWhich means you really earn $232,736.00\nMonthly: 17,902.77\n\n\nIncome: 600000\nYou get taxed $364,664.00, which is 61%\nWhich means you really earn $235,336.00\nMonthly: 18,102.77\n\n\nIncome: 610000\nYou get taxed $372,064.00, which is 61%\nWhich means you really earn $237,936.00\nMonthly: 18,302.77\n\n\nIncome: 620000\nYou get taxed $379,464.00, which is 61%\nWhich means you really earn $240,536.00\nMonthly: 18,502.77\n\n\nIncome: 630000\nYou get taxed $386,864.00, which is 61%\nWhich means you really earn $243,136.00\nMonthly: 18,702.77\n\n\nIncome: 640000\nYou get taxed $394,264.00, which is 62%\nWhich means you really earn $245,736.00\nMonthly: 18,902.77\n\n\nIncome: 650000\nYou get taxed $401,664.00, which is 62%\nWhich means you really earn $248,336.00\nMonthly: 19,102.77\n\n\nIncome: 660000\nYou get taxed $409,064.00, which is 62%\nWhich means you really earn $250,936.00\nMonthly: 19,302.77\n\n\nIncome: 670000\nYou get taxed $416,464.00, which is 62%\nWhich means you really earn $253,536.00\nMonthly: 19,502.77\n\n\nIncome: 680000\nYou get taxed $423,864.00, which is 62%\nWhich means you really earn $256,136.00\nMonthly: 19,702.77\n\n\nIncome: 690000\nYou get taxed $431,264.00, which is 63%\nWhich means you really earn $258,736.00\nMonthly: 19,902.77\n\n\nIncome: 700000\nYou get taxed $438,664.00, which is 63%\nWhich means you really earn $261,336.00\nMonthly: 20,102.77\n\n\nIncome: 710000\nYou get taxed $446,064.00, which is 63%\nWhich means you really earn $263,936.00\nMonthly: 20,302.77\n\n\nIncome: 720000\nYou get taxed $453,464.00, which is 63%\nWhich means you really earn $266,536.00\nMonthly: 20,502.77\n\n\nIncome: 730000\nYou get taxed $460,864.00, which is 63%\nWhich means you really earn $269,136.00\nMonthly: 20,702.77\n\n\nIncome: 740000\nYou get taxed $468,264.00, which is 63%\nWhich means you really earn $271,736.00\nMonthly: 20,902.77\n\n\nIncome: 750000\nYou get taxed $475,664.00, which is 63%\nWhich means you really earn $274,336.00\nMonthly: 21,102.77\n\n\nIncome: 760000\nYou get taxed $483,064.00, which is 64%\nWhich means you really earn $276,936.00\nMonthly: 21,302.77\n\n\nIncome: 770000\nYou get taxed $490,464.00, which is 64%\nWhich means you really earn $279,536.00\nMonthly: 21,502.77\n\n\nIncome: 780000\nYou get taxed $497,864.00, which is 64%\nWhich means you really earn $282,136.00\nMonthly: 21,702.77\n\n\nIncome: 790000\nYou get taxed $505,264.00, which is 64%\nWhich means you really earn $284,736.00\nMonthly: 21,902.77\n\n\nIncome: 800000\nYou get taxed $512,664.00, which is 64%\nWhich means you really earn $287,336.00\nMonthly: 22,102.77\n\n\nIncome: 810000\nYou get taxed $520,064.00, which is 64%\nWhich means you really earn $289,936.00\nMonthly: 22,302.77\n\n\nIncome: 820000\nYou get taxed $527,464.00, which is 64%\nWhich means you really earn $292,536.00\nMonthly: 22,502.77\n\n\nIncome: 830000\nYou get taxed $534,864.00, which is 64%\nWhich means you really earn $295,136.00\nMonthly: 22,702.77\n\n\nIncome: 840000\nYou get taxed $542,264.00, which is 65%\nWhich means you really earn $297,736.00\nMonthly: 22,902.77\n\n\nIncome: 850000\nYou get taxed $549,664.00, which is 65%\nWhich means you really earn $300,336.00\nMonthly: 23,102.77\n\n\nIncome: 860000\nYou get taxed $557,064.00, which is 65%\nWhich means you really earn $302,936.00\nMonthly: 23,302.77\n\n\nIncome: 870000\nYou get taxed $564,464.00, which is 65%\nWhich means you really earn $305,536.00\nMonthly: 23,502.77\n\n\nIncome: 880000\nYou get taxed $571,864.00, which is 65%\nWhich means you really earn $308,136.00\nMonthly: 23,702.77\n\n\nIncome: 890000\nYou get taxed $579,264.00, which is 65%\nWhich means you really earn $310,736.00\nMonthly: 23,902.77\n\n\n</code>\n</pre>"},{"location":"book/Notebooks/Ch1/#testing","title":"Testing","text":""},{"location":"book/Notebooks/Ch2/","title":"Ch2","text":"<pre><code>x = 1\nprint(id(x))\n</code></pre> <pre>\n<code>140719369161144\n</code>\n</pre> <pre><code>z = x\nprint(id(z))\n</code></pre> <pre>\n<code>140719369161144\n</code>\n</pre> <pre><code>x = '\u00f0\u0178\u00a6\u2013'\n</code></pre> <pre><code>print(x)\n</code></pre> <pre>\n<code>\u00f0\u0178\u00a6\u2013\n</code>\n</pre> <pre><code>joules_per_TNT_ton = 4.184e9\njoules_per_TNT_ton\n</code></pre> <pre>\n<code>4184000000.0</code>\n</pre> <pre><code>int(joules_per_TNT_ton)\n</code></pre> <pre>\n<code>4184000000</code>\n</pre> <pre><code>print(f'{13.12345: .2f}')\n</code></pre> <pre>\n<code> 13.12\n</code>\n</pre> <pre><code>5 / 3\n</code></pre> <pre>\n<code>1.6666666666666667</code>\n</pre> <pre><code>import random\nprint(random.randrange(12, 20))\n</code></pre> <pre>\n<code>17\n</code>\n</pre>"},{"location":"book/Notebooks/Ch3/","title":"Ch3","text":"<pre><code>{1, 1, 3}\n</code></pre> <pre>\n<code>{1, 3}</code>\n</pre>"},{"location":"book/Notebooks/Python%20Crash%20Course/","title":"Python Crash Course","text":"<pre><code># Addition\n1 + 0\n</code></pre> <pre>\n<code>1</code>\n</pre> <pre><code># Multiplication\n1 * 0\n</code></pre> <pre>\n<code>0</code>\n</pre> <pre><code># Division\n0 / 1\n</code></pre> <pre>\n<code>0.0</code>\n</pre> <pre><code># Floor Division\n5 // 2\n</code></pre> <pre>\n<code>2</code>\n</pre> <pre><code># Exponential\n2 ** 4\n</code></pre> <pre>\n<code>16</code>\n</pre> <pre><code># Modulo Example 1\n4 % 2\n</code></pre> <pre>\n<code>0</code>\n</pre> <pre><code># Modulo Example 2\n5 % 2\n</code></pre> <pre>\n<code>1</code>\n</pre> <pre><code># Order of Operations\n(1 + 3) * (2  + 2)\n</code></pre> <pre>\n<code>16</code>\n</pre> <pre><code>moy = 13\n</code></pre> <pre><code>x = 1\ny = 2\n</code></pre> <pre><code>z = x + y + moy\n</code></pre> <pre><code>z\n</code></pre> <pre>\n<code>16</code>\n</pre> <pre><code>'Single Quotes'\n</code></pre> <pre>\n<code>'Single Quotes'</code>\n</pre> <pre><code>\"Double Quotes\"\n</code></pre> <pre>\n<code>'Double Quotes'</code>\n</pre> <pre><code>\"I don't want to review python\"\n</code></pre> <pre>\n<code>\"I don't want to review python\"</code>\n</pre> <pre><code>mo = 'WOW'\n</code></pre> <pre><code>mo\n</code></pre> <pre>\n<code>'WOW'</code>\n</pre> <pre><code>print(mo)\n</code></pre> <pre>\n<code>WOW\n</code>\n</pre> <pre><code>number = 100\nname = 'Goku'\n</code></pre> <pre><code># Formats\nprint('I can count up to {something1} before {something2} does kamehameha'.format(something1=number, something2=name))\n</code></pre> <pre>\n<code>I can count up to 100 before Goku does kamehameha\n</code>\n</pre> <pre><code># Format ex. 2\nprint('I can count up to {} before {} does kamehameha'.format(number, name))\n</code></pre> <pre>\n<code>I can count up to 100 before Goku does kamehameha\n</code>\n</pre> <pre><code># F string\nprint(f'{name} is older than {number}')\n</code></pre> <pre>\n<code>Goku is older than 100\n</code>\n</pre> <pre><code># A list has []\n[1, 2, 3]\n</code></pre> <pre>\n<code>[1, 2, 3]</code>\n</pre> <pre><code>['moy', name, ['a',2, number]]\n</code></pre> <pre>\n<code>['moy', 'Goku', ['a', 2, 100]]</code>\n</pre> <pre><code>popo_list = ['a', 'b', 'c', ['more', 'nested', 'stuff']]\n</code></pre> <pre><code>popo_list[3]\n</code></pre> <pre>\n<code>['more', 'nested', 'stuff']</code>\n</pre> <pre><code>popo_list[0]\n</code></pre> <pre>\n<code>'a'</code>\n</pre> <pre><code>popo_list[1:]\n</code></pre> <pre>\n<code>['b', 'c', ['more', 'nested', 'stuff']]</code>\n</pre> <pre><code>popo_list[:2]\n</code></pre> <pre>\n<code>['a', 'b']</code>\n</pre> <pre><code>popo_list[:-1]\n</code></pre> <pre>\n<code>['a', 'b', 'c']</code>\n</pre> <pre><code>popo_list[0] = 13\npopo_list\n</code></pre> <pre>\n<code>[13, 'b', 'c', ['more', 'nested', 'stuff']]</code>\n</pre> <pre><code>popo_list[3][2]\n</code></pre> <pre>\n<code>'stuff'</code>\n</pre> <pre><code>dic1 = {'key': 'value', 'key2': 'value2'}\n</code></pre> <pre><code>dic1['key2']\n</code></pre> <pre>\n<code>'value2'</code>\n</pre> <pre><code>dic1.keys()\n</code></pre> <pre>\n<code>dict_keys(['key', 'key2'])</code>\n</pre> <pre><code>dic1.values()\n</code></pre> <pre>\n<code>dict_values(['value', 'value2'])</code>\n</pre> <pre><code>dic1.items()\n</code></pre> <pre>\n<code>dict_items([('key', 'value'), ('key2', 'value2')])</code>\n</pre> <pre><code>tuple1 = (1, 2, 3, 4, 5, 5)\n</code></pre> <pre><code>tuple1[3]\n</code></pre> <pre>\n<code>4</code>\n</pre> <pre><code>try:\n    tuple1[3] = 'Hola'\nexcept Exception as e:\n    print(type(e).__name__)\n    print(type(e).__doc__)\n    print(e)\n</code></pre> <pre>\n<code>TypeError\nInappropriate argument type.\n'tuple' object does not support item assignment\n</code>\n</pre> <pre><code>set1 = {1, 2, 3, 4, 5, 5}\n</code></pre> <pre><code>set1\n</code></pre> <pre>\n<code>{1, 2, 3, 4, 5}</code>\n</pre> <pre><code>try:\n    set1[0] = 13\nexcept Exception as e:\n    print(type(e).__name__)\n    print(type(e).__doc__)\n    print(e)\n</code></pre> <pre>\n<code>TypeError\nInappropriate argument type.\n'set' object does not support item assignment\n</code>\n</pre> <pre><code>4 &amp;gt; 2\n</code></pre> <pre>\n<code>True</code>\n</pre> <pre><code>0 &amp;gt;= 2\n</code></pre> <pre>\n<code>False</code>\n</pre> <pre><code>0 == 1\n</code></pre> <pre>\n<code>False</code>\n</pre> <pre><code>'Goku' == 'Goku '\n</code></pre> <pre>\n<code>False</code>\n</pre> <pre><code>'Goku' == 'Goku'\n</code></pre> <pre>\n<code>True</code>\n</pre> <pre><code>(2 &amp;gt; 0) and (3 &amp;gt; 5)\n</code></pre> <pre>\n<code>False</code>\n</pre> <pre><code>(2 &amp;gt; 0) or (3 &amp;gt; 5)\n</code></pre> <pre>\n<code>True</code>\n</pre> <pre><code>if 3 &amp;gt; 4:\n    print('Print if statement is true')\nelse:\n    print('Print if statement is false')\n</code></pre> <pre>\n<code>Print if statement is false\n</code>\n</pre> <pre><code>if 3 &amp;lt; 4:\n    print('Print if statement is true')\nelse:\n    print('Print if statement is false')\n</code></pre> <pre>\n<code>Print if statement is true\n</code>\n</pre> <pre><code>if 1 &amp;gt; 2:\n    print('First Statement')\nelif 13 == 13:\n    print('Middle Statement')\nelse:\n    print('Last Statement')\n</code></pre> <pre>\n<code>Middle Statement\n</code>\n</pre> <pre><code>a_list = ['I', 'am', 'one', 'or', 1]\n</code></pre> <pre><code>for something in a_list:\n    print(something)\n</code></pre> <pre>\n<code>I\nam\none\nor\n1\n</code>\n</pre> <pre><code>for _ in a_list:\n    print(_)\n    print('repeat this')\n</code></pre> <pre>\n<code>I\nrepeat this\nam\nrepeat this\none\nrepeat this\nor\nrepeat this\n1\nrepeat this\n</code>\n</pre> <pre><code>for x in range(5):\n    print(x)\n</code></pre> <pre>\n<code>0\n1\n2\n3\n4\n</code>\n</pre> <pre><code>list(range(5))\n</code></pre> <pre>\n<code>[0, 1, 2, 3, 4]</code>\n</pre> <pre><code>i = 1\nwhile i &amp;lt; 5:\n    print(f'i = {i}')\n    i += 1\n</code></pre> <pre>\n<code>i = 1\ni = 2\ni = 3\ni = 4\n</code>\n</pre> <pre><code>numberList = [1, 2, 3, 4, 5]\ninputList = []\nfor element in numberList:\n    inputList.append(element**2)\nprint(inputList)\n</code></pre> <pre>\n<code>[1, 4, 9, 16, 25]\n</code>\n</pre> <pre><code>[x**2 for x in numberList]\n</code></pre> <pre>\n<code>[1, 4, 9, 16, 25]</code>\n</pre> <pre><code>def my_func(param1='some default value'):\n    '''\n    DocString: Some documentation and details of how your func works.\n    '''\n    print(param1)\n</code></pre> <pre><code>my_func\n</code></pre> <pre>\n<code>&lt;function __main__.my_func(param1='some default value')&gt;</code>\n</pre> <pre><code>my_func()\n</code></pre> <pre>\n<code>some default value\n</code>\n</pre> <pre><code>my_func('Not a default value, :)')\n</code></pre> <pre>\n<code>Not a default value, :)\n</code>\n</pre> <pre><code>def squarethis(number):\n    return number**2\n</code></pre> <pre><code>squared_value = squarethis(4)\nprint(squared_value)\n</code></pre> <pre>\n<code>16\n</code>\n</pre> <pre><code>stringy = 'Hi, my name is Harry. Harry Potter.'\n</code></pre> <pre><code>stringy.lower()\n</code></pre> <pre>\n<code>'hi, my name is harry. harry potter.'</code>\n</pre> <pre><code>stringy.upper()\n</code></pre> <pre>\n<code>'HI, MY NAME IS HARRY. HARRY POTTER.'</code>\n</pre> <pre><code>stringy.split()\n</code></pre> <pre>\n<code>['Hi,', 'my', 'name', 'is', 'Harry.', 'Harry', 'Potter.']</code>\n</pre> <pre><code>stringy.split('.')\n</code></pre> <pre>\n<code>['Hi, my name is Harry', ' Harry Potter', '']</code>\n</pre> <pre><code>stringy.split('.')[0]\n</code></pre> <pre>\n<code>'Hi, my name is Harry'</code>\n</pre> <pre><code>def replaceMe(something):\n    return something + 10\n</code></pre> <pre><code>replaceMe(5)\n</code></pre> <pre>\n<code>15</code>\n</pre> <pre><code>lambda x : x + 10\n</code></pre> <pre>\n<code>&lt;function __main__.&lt;lambda&gt;(x)&gt;</code>\n</pre> <pre><code>aList = [1, 2, 3, 4, 5]\n</code></pre> <pre><code>map(replaceMe, aList)\n</code></pre> <pre>\n<code>&lt;map at 0x220b25ba230&gt;</code>\n</pre> <pre><code>list(map(replaceMe, aList))\n</code></pre> <pre>\n<code>[11, 12, 13, 14, 15]</code>\n</pre> <pre><code>list(map(lambda x : x + 10, aList))\n</code></pre> <pre>\n<code>[11, 12, 13, 14, 15]</code>\n</pre> <pre><code>filter(lambda element : element % 2 == 0, aList)\n</code></pre> <pre>\n<code>&lt;filter at 0x220b25b9a50&gt;</code>\n</pre> <pre><code>list(filter(lambda element : element % 2 == 0, aList))\n</code></pre> <pre>\n<code>[2, 4]</code>\n</pre>"},{"location":"book/Notebooks/Python%20Crash%20Course/#python-crash-course","title":"Python Crash Course","text":"<p>Note - This is not a comprehensive overview, you will need to review Python or take a course on it.</p>"},{"location":"book/Notebooks/Python%20Crash%20Course/#topics-covered","title":"Topics Covered","text":""},{"location":"book/Notebooks/Python%20Crash%20Course/#data-types","title":"Data Types","text":"<ul> <li>Strings</li> <li>Integers</li> <li>Lists</li> <li>Dictionaries</li> <li>Booleans</li> <li>Tuples</li> <li>Sets  </li> </ul>"},{"location":"book/Notebooks/Python%20Crash%20Course/#other-topics","title":"Other Topics","text":"<ul> <li>Operators</li> <li>If, else, elif</li> <li>Loops</li> <li>While loops</li> <li>Range()</li> <li>List comprehension</li> <li>Functions</li> <li>Methods</li> <li>Lambda expressions</li> <li>Map and filters</li> </ul>"},{"location":"book/Notebooks/Python%20Crash%20Course/#data-types_1","title":"Data Types","text":""},{"location":"book/Notebooks/Python%20Crash%20Course/#variables","title":"Variables","text":""},{"location":"book/Notebooks/Python%20Crash%20Course/#strings","title":"Strings","text":""},{"location":"book/Notebooks/Python%20Crash%20Course/#prints","title":"Prints","text":""},{"location":"book/Notebooks/Python%20Crash%20Course/#lists","title":"Lists","text":""},{"location":"book/Notebooks/Python%20Crash%20Course/#dictionaries","title":"Dictionaries","text":""},{"location":"book/Notebooks/Python%20Crash%20Course/#tuples","title":"Tuples","text":""},{"location":"book/Notebooks/Python%20Crash%20Course/#sets","title":"Sets","text":""},{"location":"book/Notebooks/Python%20Crash%20Course/#operators","title":"Operators","text":""},{"location":"book/Notebooks/Python%20Crash%20Course/#logic-operators","title":"Logic Operators","text":""},{"location":"book/Notebooks/Python%20Crash%20Course/#if-elif-else-statements","title":"If, elif, else Statements","text":""},{"location":"book/Notebooks/Python%20Crash%20Course/#for-loop","title":"For Loop","text":""},{"location":"book/Notebooks/Python%20Crash%20Course/#while-loops","title":"While Loops","text":""},{"location":"book/Notebooks/Python%20Crash%20Course/#list-comprehension","title":"List Comprehension","text":""},{"location":"book/Notebooks/Python%20Crash%20Course/#functions","title":"Functions","text":""},{"location":"book/Notebooks/Python%20Crash%20Course/#methods","title":"Methods","text":""},{"location":"book/Notebooks/Python%20Crash%20Course/#lambda-expresssions","title":"Lambda Expresssions","text":""},{"location":"book/Notebooks/Python%20Crash%20Course/#map-and-filters","title":"Map and Filters","text":""},{"location":"book/Notebooks/Python%20Crash%20Course/#great-job","title":"Great Job!","text":""}]}